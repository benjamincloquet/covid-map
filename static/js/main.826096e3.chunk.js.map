{"version":3,"sources":["components/header/Header.jsx","components/map/country-selection-context.jsx","components/map/shp/ne_110m_admin_0_countries.zip","components/map/ShapeFile.jsx","components/map/Popup.jsx","components/map/useCovidInfo.js","components/map/Map.jsx","components/app/App.jsx","index.jsx"],"names":["Header","href","CountrySelectionStateContext","createContext","CountrySelectionDispatchContext","countrySelectionReducer","state","action","type","selectedCountry","payload","Error","CountrySelectionProvider","children","useReducer","dispatch","Provider","value","useCountrySelectionState","context","useContext","undefined","useCountrySelectionDispatch","useCountrySelection","ShapeFile","map","onEachFeature","feature","layer","on","name","properties","NAME","displayName","ADMIN","style","color","weight","opacity","fillOpacity","useEffect","geoJSONLayerOptions","geoJSONLayer","Leaflet","geoJSON","features","addTo","shp","zipUrl","then","data","addData","Popup","countryName","useState","countryInfo","setCountryInfo","error","setError","fetch","res","json","result","useCovidInfo","className","width","height","src","code","toLowerCase","alt","confirmed","toLocaleString","recovered","deaths","onClick","aria-label","BaseLayer","LayersControl","Map","setMap","MapContainer","whenCreated","bounds","position","checked","TileLayer","url","noWrap","FeatureGroup","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.826096e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <h1>covid-map</h1>\r\n    <h3>Click on a country to see its up to date stats related to the COVID-19 pandemic.</h3>\r\n    <h2><a href=\"https://github.com/benjamincloquet/covid-map\">A project by Benjamin Cloquet</a></h2>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CountrySelectionStateContext = createContext();\r\nconst CountrySelectionDispatchContext = createContext();\r\n\r\nconst countrySelectionReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'select': {\r\n      return { selectedCountry: action.payload };\r\n    }\r\n    case 'deselect': {\r\n      return { selectedCountry: null };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst CountrySelectionProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(countrySelectionReducer, { selectedCountry: null });\r\n  return (\r\n    <CountrySelectionStateContext.Provider value={state}>\r\n      <CountrySelectionDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </CountrySelectionDispatchContext.Provider>\r\n    </CountrySelectionStateContext.Provider>\r\n  );\r\n};\r\n\r\nCountrySelectionProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nconst useCountrySelectionState = () => {\r\n  const context = useContext(CountrySelectionStateContext);\r\n  if (context === undefined) {\r\n    throw new Error('useCountrySelectionState must be used within a CountrySelectionProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useCountrySelectionDispatch = () => {\r\n  const context = useContext(CountrySelectionDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error('useCountrySelectionDispatch must be used within a CountrySelectionProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useCountrySelection = () => ({ state: useCountrySelectionState(), dispatch: useCountrySelectionDispatch() });\r\n\r\nexport {\r\n  CountrySelectionProvider, useCountrySelection,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/ne_110m_admin_0_countries.7fe02f72.zip\";","import { useEffect } from 'react';\r\nimport Leaflet from 'leaflet';\r\nimport shp from 'shpjs';\r\nimport zipUrl from './shp/ne_110m_admin_0_countries.zip';\r\nimport { useCountrySelection } from './country-selection-context';\r\n\r\nconst ShapeFile = ({ map }) => {\r\n  const { dispatch } = useCountrySelection();\r\n\r\n  const onEachFeature = (feature, layer) => {\r\n    layer.on('click', () => {\r\n      dispatch({\r\n        type: 'select',\r\n        payload: {\r\n          name: feature.properties.NAME,\r\n          displayName: feature.properties.ADMIN,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  const style = {\r\n    color: '#4acc22',\r\n    weight: 1,\r\n    opacity: 1,\r\n    fillOpacity: 0,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      const geoJSONLayerOptions = { onEachFeature, style };\r\n      const geoJSONLayer = Leaflet.geoJSON({ features: [] }, geoJSONLayerOptions);\r\n      geoJSONLayer.addTo(map);\r\n      shp(zipUrl).then((data) => {\r\n        geoJSONLayer.addData(data);\r\n      });\r\n    }\r\n  }, [map]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ShapeFile;\r\n","import React from 'react';\r\nimport { useCountrySelection } from './country-selection-context';\r\nimport useCovidInfo from './useCovidInfo';\r\nimport './Popup.css';\r\n\r\nconst Popup = () => {\r\n  const { state, dispatch } = useCountrySelection();\r\n  const { selectedCountry } = state;\r\n  const { countryInfo, error } = useCovidInfo(selectedCountry ? selectedCountry.name : null);\r\n\r\n  const displayContent = () => {\r\n    if (!countryInfo && !error) {\r\n      return <p>Loading...</p>;\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"popup-country-card\">\r\n          <h1 className=\"popup-country-name\">{selectedCountry.displayName}</h1>\r\n          {countryInfo\r\n            ? (\r\n              <img\r\n                className=\"popup-country-flag\"\r\n                width=\"40\"\r\n                height=\"30\"\r\n                src={`https://flagcdn.com/120x90/${countryInfo.code.toLowerCase()}.png`}\r\n                alt={countryInfo.name}\r\n              />\r\n            ) : null }\r\n        </div>\r\n        {error\r\n          ? <h2>No data for this country.</h2>\r\n          : (\r\n            <div className=\"popup-figure-container\">\r\n              <div>\r\n                <h2 className=\"popup-figure-name\">\r\n                  Confirmed cases\r\n                </h2>\r\n                <h2 className=\"popup-figure-name\">\r\n                  Recovered\r\n                </h2>\r\n                <h2 className=\"popup-figure-name\">\r\n                  Deaths\r\n                </h2>\r\n              </div>\r\n              <div>\r\n                <h2 className=\"popup-figure\">\r\n                  {countryInfo.confirmed.toLocaleString()}\r\n                </h2>\r\n                <h2 className=\"popup-figure\">\r\n                  {countryInfo.recovered.toLocaleString()}\r\n                </h2>\r\n                <h2 className=\"popup-figure\">\r\n                  {countryInfo.deaths.toLocaleString()}\r\n                </h2>\r\n              </div>\r\n            </div>\r\n          )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const onClosePopup = () => {\r\n    dispatch({ type: 'deselect' });\r\n  };\r\n\r\n  return (\r\n    <div className={`popup ${state.selectedCountry === null ? 'popup-hidden' : null}`}>\r\n      {state.selectedCountry === null ? null : displayContent()}\r\n      <button type=\"button\" className=\"popup-close-button\" onClick={onClosePopup} aria-label=\"close\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default (countryName) => {\r\n  const [countryInfo, setCountryInfo] = useState(null);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setError(false);\r\n    if (countryName) {\r\n      fetch(`https://covid19-api.com/country?name=${countryName}&format=json`)\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          if (result[0] === undefined) {\r\n            setError(true);\r\n          } else {\r\n            setError(false);\r\n            setCountryInfo(result[0]);\r\n          }\r\n        });\r\n    } else {\r\n      setCountryInfo(null);\r\n    }\r\n  }, [countryName]);\r\n\r\n  return { countryInfo, error };\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  MapContainer, TileLayer, LayersControl, FeatureGroup,\r\n} from 'react-leaflet';\r\nimport { CountrySelectionProvider } from './country-selection-context';\r\nimport ShapeFile from './ShapeFile';\r\nimport Popup from './Popup';\r\nimport './Map.css';\r\n\r\nconst { BaseLayer } = LayersControl;\r\n\r\nconst Map = () => {\r\n  const [map, setMap] = useState(null);\r\n\r\n  return (\r\n    <CountrySelectionProvider>\r\n      <MapContainer\r\n        className=\"map-container\"\r\n        whenCreated={setMap}\r\n        bounds={[\r\n          [-10, -10],\r\n          [50, 10],\r\n        ]}\r\n      >\r\n        <LayersControl position=\"topright\">\r\n          <BaseLayer checked name=\"OpenStreetMap.Mapnik\">\r\n            <TileLayer\r\n              url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n              noWrap\r\n            />\r\n          </BaseLayer>\r\n          <FeatureGroup>\r\n            <ShapeFile map={map} />\r\n          </FeatureGroup>\r\n        </LayersControl>\r\n        <Popup />\r\n      </MapContainer>\r\n    </CountrySelectionProvider>\r\n  );\r\n};\r\nexport default Map;\r\n","import React from 'react';\nimport Header from '../header/Header';\nimport Map from '../map/Map';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}